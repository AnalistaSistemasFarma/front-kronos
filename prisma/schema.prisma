generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedCases     Case[]  @relation("TechnicalAccount")

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true)
  role          String         @default("user")
  accounts      Account[]
  companyUsers  CompanyUser[]
  sessions      Session[]
  auditLogs     UserAuditLog[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Company {
  id_company    Int             @id @default(autoincrement())
  company       String
  company_logo  String?
  companyUsers  CompanyUser[]
  sap_endpoints sap_endpoints[]

  @@map("company")
}

model CompanyUser {
  id_company_user Int                     @id @default(autoincrement())
  id_company      Int
  id_user         String
  company         Company                 @relation(fields: [id_company], references: [id_company], onDelete: Cascade)
  user            User                    @relation(fields: [id_user], references: [id], onDelete: Cascade)
  subprocesses    SubprocessUserCompany[]

  @@map("company_user")
}

model Process {
  id_process   Int          @id @default(autoincrement())
  process      String
  process_url  String?
  subprocesses Subprocess[]

  @@map("process")
}

model Subprocess {
  id_subprocess           Int                     @id @default(autoincrement())
  subprocess              String
  id_process              Int
  subprocess_url          String?
  process                 Process                 @relation(fields: [id_process], references: [id_process], onDelete: Cascade)
  subprocessUserCompanies SubprocessUserCompany[]

  @@map("subprocess")
}

model SubprocessUserCompany {
  id_subprocess_user_company Int         @id @default(autoincrement())
  id_subprocess              Int
  id_company_user            Int
  companyUser                CompanyUser @relation(fields: [id_company_user], references: [id_company_user], onDelete: Cascade)
  subprocess                 Subprocess  @relation(fields: [id_subprocess], references: [id_subprocess], onDelete: Cascade)

  @@map("subprocess_user_company")
}

model UserAuditLog {
  id_audit_log Int      @id @default(autoincrement())
  user_id      String
  action       String
  performed_by String
  details      String?  @db.Text
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_audit_log")
}

model StatusCase {
  id_status_case Int    @id @default(autoincrement())
  status         String @unique
  cases          Case[]

  @@map("status_case")
}

model Active {
  id_active    Int            @id @default(autoincrement())
  name         String         @unique
  Renamedcase  Case[]

  @@map("active")
}

model Department {
  id_department Int    @id @default(autoincrement())
  department    String @unique
  cases         Case[]

  @@map("department")
}

model Category {
  id_category   Int            @id @default(autoincrement())
  category      String         @unique
  categoryCase  CategoryCase[]
  subcategories Subcategory[]

  @@map("category")
}

model Subcategory {
  id_subcategory Int            @id @default(autoincrement())
  subcategory    String         @unique
  id_category    Int?
  activities     Activity[]
  categoryCase   CategoryCase[]
  category       Category?      @relation(fields: [id_category], references: [id_category], onDelete: NoAction, onUpdate: NoAction, map: "FK__subcatego__id_ca__0D7A0286")

  @@map("subcategory")
}

model Activity {
  id_activity    Int            @id @default(autoincrement())
  activity       String
  id_subcategory Int?
  subcategory    Subcategory?   @relation(fields: [id_subcategory], references: [id_subcategory], onDelete: NoAction, onUpdate: NoAction, map: "FK__activity__id_sub__0E6E26BF")
  categoryCase   CategoryCase[] @relation("CategoryCaseActive")

  @@map("activity")
}

model Case {
  id_case          Int               @id @default(autoincrement())
  description      String            @db.Text
  id_status_case   Int
  subject_case     String
  creation_date    DateTime          @default(now())
  resolution       String?           @db.Text
  end_date         DateTime?
  id_technical     String
  requester        String
  id_active        Int?
  place            String?
  id_department    Int
  case_type        String
  priority         String
  active           Active?           @relation(fields: [id_active], references: [id_active], onDelete: NoAction)
  department       Department        @relation(fields: [id_department], references: [id_department])
  statusCase       StatusCase        @relation(fields: [id_status_case], references: [id_status_case])
  technicalAccount Account           @relation("TechnicalAccount", fields: [id_technical], references: [id], onUpdate: NoAction)
  categoryCase     CategoryCase[]
  logs             LogCaseHelpDesk[]
  notes            Note[]

  @@map("case")
}

model CategoryCase {
  id_category_case Int         @id @default(autoincrement())
  id_case          Int
  id_category      Int
  id_subcategory   Int
  id_activity      Int
  case             Case        @relation(fields: [id_case], references: [id_case], onDelete: Cascade)
  category         Category    @relation(fields: [id_category], references: [id_category], onUpdate: NoAction)
  subcategory      Subcategory @relation(fields: [id_subcategory], references: [id_subcategory], onUpdate: NoAction)
  activity         Activity    @relation("CategoryCaseActive", fields: [id_activity], references: [id_activity], onUpdate: NoAction, map: "fk_category_case_active")

  @@map("category_case")
}

model Note {
  id_note Int    @id @default(autoincrement())
  id_case Int
  note    String @db.Text
  case    Case   @relation(fields: [id_case], references: [id_case], onDelete: Cascade)

  @@map("notes")
}

model LogCaseHelpDesk {
  id_log  Int    @id @default(autoincrement())
  id_case Int
  log     String @db.Text
  case    Case   @relation(fields: [id_case], references: [id_case], onDelete: Cascade)

  @@map("logs_case_help_desk")
}

model sap_endpoints {
  id_sap_endpoint Int      @id @default(autoincrement())
  id_company      Int
  endpoint_name   String
  base_url        String
  username        String?
  password        String?
  client          String?
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime
  company         Company  @relation(fields: [id_company], references: [id_company], onDelete: Cascade)
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B612B2C881E") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}
